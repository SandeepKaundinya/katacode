To learn Kubernetes 
https://www.katacoda.com/courses/kubernetes/launch-single-node-cluster
https://www.katacoda.com/sandeepkaundinya

Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a VM on your laptop 
for users looking to try out Kubernetes or develop with it day-to-day.
More details can be found at https://github.com/kubernetes/minikube

Step 1 - Start Minikube
Minikube has been installed and configured in the environment. Check that it is properly installed, by running the minikube version 
command:
minikube version
Start the cluster, by running the minikube start command:
minikube start
Great! You now have a running Kubernetes cluster in your online terminal. 
Minikube started a virtual machine for you, and a Kubernetes cluster is now running in that VM.

 minikube version
minikube version: v0.28.2
$ minikube start
Starting local Kubernetes v1.10.0 cluster...
Starting VM...
Getting VM IP address...
Moving files into cluster...
Setting up certs...
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file

Step 2 - Cluster Info
The cluster can be interacted with using the kubectl CLI. This is the main approach used for managing Kubernetes and the applications 
running on top of the cluster.
Details of the cluster and its health status can be discovered via kubectl cluster-info
To view the nodes in the cluster using kubectl get nodes
If the node is marked as NotReady then it is still starting the components.
This command shows all nodes that can be used to host our applications. Now we have only one node, 
and we can see that itâ€™s status is ready (it is ready to accept applications for deployment).

$ kubectl cluster-info
Kubernetes master is running at https://172.17.0.118:8443

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
$ kubectl get nodes
NAME       STATUS    ROLES     AGE       VERSION
minikube   Ready     <none>    3m        v1.10.0

Step 3 - Deploy Containers
With a running Kubernetes cluster, containers can now be deployed.
Using kubectl run, it allows containers to be deployed onto the cluster - kubectl run first-deployment --image=katacoda/docker-http-server --port=80
The status of the deployment can be discovered via the running Pods - kubectl get pods
Once the container is running it can be exposed via different networking options, depending on requirements. One possible solution is NodePort, that provides a dynamic port to a container.
kubectl expose deployment first-deployment --port=80 --type=NodePort
The command below finds the allocated port and executes a HTTP request.
export PORT=$(kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}')
echo "Accessing host01:$PORT"
curl host01:$PORT
The results is the container that processed the request.

$ kubectl run first-deployment --image=katacoda/docker-http-server --port=80
deployment.apps/first-deployment created
$ kubectl get pods
NAME                                READY     STATUS    RESTARTS   AGE
first-deployment-59f6bb4956-nrs6n   1/1       Running   0          16s
$ kubectl expose deployment first-deployment --port=80 --type=NodePort
service/first-deployment exposed
$ export PORT=$(kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}')
$ echo "Accessing host01:$PORT"
Accessing host01:31938
$ curl host01:$PORT
<h1>This request was processed by host: first-deployment-59f6bb4956-nrs6n</h1>
